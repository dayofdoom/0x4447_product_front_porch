{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploy a website that can accept files from anyone from the Internet - ideal for when you need to receive GB size files.",
	"Parameters": {
		"CodePipelineArtifacts": {
			"Description": "The S3 bucket name where CodePipeline will store the artifacts (this is needed only by CP to work, and pass task results to the next stage).",
			"Type": "String"
		},
		"CompanyLogoParam": {
			"Description": "A public URL to the logo of your company.",
			"Type": "String"
		},
		"YearEstablishedParam": {
			"Description": "The year in which the company was created.",
			"Type": "String"
		},
		"CompanyNameParam": {
			"Description": "The legal name of your company.",
			"Type": "String"
		},
		"DomainHomePage": {
			"Description": "Type your domain for your project",
			"Type": "String"
		},
		"ExpirationDayParam": {
			"Description": "After how many days would you like the uploaded files to be removed?",
			"Type": "String"
		},
		"GitHubToken": {
			"Description": "You need to create a Personal access tokens (https://github.com/settings/tokens) for CodePipeline to have access to the GitHub repo despite it being public.",
			"Type": "String"
		},
		"CertificateARN": {
			"Description": "The ARN of a SSL Certificate.",
			"Type": "String"
		},
		"Stage": {
			"Description": "Select what type of environment are you deploying.",
			"Type": "String",
			"AllowedValues": [
				"master",
				"development"
			],
			"Default": "development"
		}
	},
	"Resources": {
		"CloudFrontStart": {
			"Type": "AWS::CloudFront::Distribution",
			"Properties": {
				"DistributionConfig": {
					"Comment": {
						"Ref": "DomainHomePage"
					},
					"DefaultCacheBehavior": {
						"ForwardedValues": {
							"Cookies": {
								"Forward": "none"
							},
							"QueryString": false
						},
						"MinTTL": 0,
						"TargetOriginId": {
							"Fn::GetAtt": [
								"S3WebpageFrontPorch",
								"DomainName"
							]
						},
						"ViewerProtocolPolicy": "redirect-to-https",
						"AllowedMethods": [
							"GET",
							"HEAD"
						],
						"CachedMethods": [
							"GET",
							"HEAD"
						],
						"Compress": true,
						"DefaultTTL": 86400,
						"MaxTTL": 31536000,
						"SmoothStreaming": false
					},
					"Enabled": true,
					"Origins": [
						{
							"DomainName": {
								"Fn::GetAtt": [
									"S3WebpageFrontPorch",
									"DomainName"
								]
							},
							"Id": {
								"Fn::GetAtt": [
									"S3WebpageFrontPorch",
									"DomainName"
								]
							},
							"CustomOriginConfig": {
								"HTTPPort": 80,
								"HTTPSPort": 443,
								"OriginProtocolPolicy": "http-only",
								"OriginSSLProtocols": [
									"TLSv1.1"
								]
							}
						}
					],
					"Aliases": [
						{
							"Fn::Sub": "${DomainHomePage}"
						}
					],
					"ViewerCertificate": {
						"AcmCertificateArn": {
							"Ref": "CertificateARN"
						},
						"SslSupportMethod": "sni-only"
					},
					"DefaultRootObject": "home",
					"HttpVersion": "http2",
					"IPV6Enabled": true,
					"PriceClass": "PriceClass_100",
					"Restrictions": {
						"GeoRestriction": {
							"RestrictionType": "none"
						}
					}
				}
			}
		},
		"IAMGroup": {
			"Type": "AWS::IAM::Group",
			"Properties": {
				"GroupName": "0x4447_front_porch",
				"Policies": [
					{
						"PolicyName": "l_r_d",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:ListBucket",
										"s3:GetObject",
										"s3:DeleteObject",
										"s3:GetObjectAcl",
										"s3:GetObjectVersionAcl"
									],
									"Resource": [
										{
											"Fn::Sub": "arn:aws:s3:::${S3FrontPorchUploads}"
										},
										{
											"Fn::Sub": "arn:aws:s3:::${S3FrontPorchUploads}/*"
										}
									]
								},
								{
									"Effect": "Allow",
									"Action": "s3:ListAllMyBuckets",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"SNSTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": {
					"Fn::Sub": "${AWS::StackName}"
				}
			}
		},
		"SNSTopicPolicy": {
			"Type": "AWS::SNS::TopicPolicy",
			"Properties": {
				"Topics": [
					{
						"Ref": "SNSTopic"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "s3.amazonaws.com"
							},
							"Action": "SNS:Publish",
							"Resource": "*",
							"Condition": {
								"ArnLike": {
									"aws:SourceArn": {
										"Fn::Sub": "arn:aws:s3:*:*:*"
									}
								}
							}
						}
					]
				}
			}
		},
		"PipelineWebpageFrontPorch": {
			"Type": "AWS::CodePipeline::Pipeline",
			"Properties": {
				"Name": "webpage_front_porch",
				"ArtifactStore": {
					"Location": {
						"Ref": "CodePipelineArtifacts"
					},
					"Type": "S3"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"PipelineWebpageFrontPorchRole",
						"Arn"
					]
				},
				"Stages": [
					{
						"Name": "Get",
						"Actions": [
							{
								"Name": "Material",
								"RunOrder": 1,
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "ThirdParty",
									"Provider": "GitHub",
									"Version": "1"
								},
								"Configuration": {
									"Owner": "0x4447",
									"Repo": "0x4447_product_front_porch_webpage",
									"Branch": {
										"Ref": "Stage"
									},
									"PollForSourceChanges": false,
									"OAuthToken": {
										"Ref": "GitHubToken"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "material"
									}
								]
							}
						]
					},
					{
						"Name": "Cast",
						"Actions": [
							{
								"Name": "Mold",
								"RunOrder": 1,
								"InputArtifacts": [
									{
										"Name": "material"
									}
								],
								"Configuration": {
									"ProjectName": {
										"Ref": "CodeBuildWebpageFrontPorch"
									}
								},
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Provider": "CodeBuild",
									"Version": "1"
								}
							}
						]
					}
				]
			}
		},
		"PipelineWebpageFrontPorchWebhook": {
			"Type": "AWS::CodePipeline::Webhook",
			"Properties": {
				"Authentication": "GITHUB_HMAC",
				"AuthenticationConfiguration": {
					"SecretToken": {
						"Ref": "GitHubToken"
					}
				},
				"Filters": [
					{
						"JsonPath": "$.ref",
						"MatchEquals": "refs/heads/{Branch}"
					}
				],
				"TargetPipeline": {
					"Ref": "PipelineWebpageFrontPorch"
				},
				"TargetAction": "Material",
				"TargetPipelineVersion": {
					"Fn::GetAtt": [
						"PipelineWebpageFrontPorch",
						"Version"
					]
				},
				"RegisterWithThirdParty": true
			}
		},
		"PipelineWebpageFrontPorchRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_front_porch_codepipeline",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codepipeline.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"PipelineWebpageFrontPorchPolicyCB": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "code_build",
				"Roles": [
					{
						"Ref": "PipelineWebpageFrontPorchRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:BatchGetBuilds",
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildWebpageFrontPorch}"
							}
						}
					]
				}
			}
		},
		"PipelineWebpageFrontPorchPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "PipelineWebpageFrontPorchRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorch": {
			"Type": "AWS::CodeBuild::Project",
			"Properties": {
				"Name": "webpage_front_porch",
				"ServiceRole": {
					"Fn::GetAtt": [
						"CodeBuildWebpageFrontPorchRole",
						"Arn"
					]
				},
				"TimeoutInMinutes": 60,
				"Source": {
					"Type": "CODEPIPELINE",
					"BuildSpec": "buildspec.yml"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/nodejs:8.11.0",
					"EnvironmentVariables": [
						{
							"Name": "S3_BUCKET_FRONT_PORCH_SITE",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3WebpageFrontPorch"
							}
						},
						{
							"Name": "S3_BUCKET_FRONT_PORCH_UPLOADS",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3FrontPorchUploads"
							}
						},
						{
							"Name": "S3_BUCKET_FRONT_PORCH_DATABASE",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3FrontPorchDatabase"
							}
						},
						{
							"Name": "DISTRIBUTION_ID",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CloudFrontStart"
							}
						},
						{
							"Name": "YEAR_ESTABLISHED",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "YearEstablishedParam"
							}
						},
						{
							"Name": "COMPANY_NAME",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CompanyNameParam"
							}
						},
						{
							"Name": "AWS_REGION",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "AWS::Region"
							}
						},
						{
							"Name": "DOMAIN",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "DomainHomePage"
							}
						},
						{
							"Name": "COGNITO_IDENTITY_POOL_ID",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CognitoIdentityPool"
							}
						},
						{
							"Name": "COMPANY_LOGO_URL",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "CompanyLogoParam"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webpage_front_porch_codebuild",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codebuild.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchPolicyCloudFrontList": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageFrontPorchRole"
					}
				],
				"PolicyName": "cloud_front_list",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:ListDistributions"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchPolicyCloudFrontCreateInvalidation": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageFrontPorchRole"
					}
				],
				"PolicyName": "cloud_front_invalidate",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:CreateInvalidation"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchPolicyCWL": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageFrontPorchRole"
					}
				],
				"PolicyName": "cloud_watch_log_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": [
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
								}
							]
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageFrontPorchRole"
					}
				],
				"PolicyName": "s3_artifact_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageFrontPorchPolicyS3Hosting": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageFrontPorchRole"
					}
				],
				"PolicyName": "s3_hosting",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:DeleteObject"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageFrontPorch}/*"
							}
						}
					]
				}
			}
		},
		"S3FrontPorchDatabase": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Sub": "${DomainHomePage}-database"
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"*"
							],
							"AllowedMethods": [
								"POST"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				},
				"PublicAccessBlockConfiguration": {
					"BlockPublicAcls": true,
					"BlockPublicPolicy": true,
					"IgnorePublicAcls": true,
					"RestrictPublicBuckets": true
				},
				"Tags": [
					{
						"Key": "Project Name",
						"Value": "Front Porch"
					},
					{
						"Key": "Author",
						"Value": "0x4447 LLC"
					},
					{
						"Key": "Info",
						"Value": "https://0x4447.com"
					}
				]
			}
		},
		"S3WebpageFrontPorchPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "S3WebpageFrontPorch"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageFrontPorch}/*"
							}
						}
					]
				}
			}
		},
		"S3WebpageFrontPorch": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "PublicRead",
				"BucketName": {
					"Ref": "DomainHomePage"
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"Authorization"
							],
							"AllowedMethods": [
								"GET"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				},
				"WebsiteConfiguration": {
					"ErrorDocument": "error",
					"IndexDocument": "home"
				},
				"Tags": [
					{
						"Key": "Project Name",
						"Value": "Front Porch"
					},
					{
						"Key": "Author",
						"Value": "0x4447 LLC"
					},
					{
						"Key": "Info",
						"Value": "https://0x4447.com"
					}
				]
			}
		},
		"S3FrontPorchUploads": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Sub": "${DomainHomePage}-uploads"
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"*"
							],
							"AllowedMethods": [
								"PUT"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				},
				"PublicAccessBlockConfiguration": {
					"BlockPublicAcls": true,
					"BlockPublicPolicy": true,
					"IgnorePublicAcls": true,
					"RestrictPublicBuckets": true
				},
				"LifecycleConfiguration": {
					"Rules": [
						{
							"Id": "ExpiationDay",
							"ExpirationInDays": {
								"Ref": "ExpirationDayParam"
							},
							"NoncurrentVersionExpirationInDays": {
								"Ref": "ExpirationDayParam"
							},
							"Status": "Enabled"
						}
					]
				},
				"NotificationConfiguration": {
					"TopicConfigurations": [
						{
							"Topic": {
								"Ref": "SNSTopic"
							},
							"Event": "s3:ObjectCreated:Put"
						}
					]
				},
				"Tags": [
					{
						"Key": "Project Name",
						"Value": "Front Porch"
					},
					{
						"Key": "Author",
						"Value": "0x4447 LLC"
					},
					{
						"Key": "Info",
						"Value": "https://0x4447.com"
					}
				]
			}
		},
		"CognitoIdentityPool": {
			"Type": "AWS::Cognito::IdentityPool",
			"Properties": {
				"IdentityPoolName": {
					"Ref": "DomainHomePage"
				},
				"AllowUnauthenticatedIdentities": true
			}
		},
		"CognitoIdentityPoolPolicyLCF": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "CognitoIDPUnauthenticatedRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:PutObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3FrontPorchUploads}/*"
							}
						},
						{
							"Effect": "Allow",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3FrontPorchDatabase}/emails.json"
							}
						}
					]
				}
			}
		},
		"CognitoIdentityPoolRoleAttachment": {
			"Type": "AWS::Cognito::IdentityPoolRoleAttachment",
			"Properties": {
				"IdentityPoolId": {
					"Ref": "CognitoIdentityPool"
				},
				"Roles": {
					"authenticated": {
						"Fn::GetAtt": [
							"CognitoIDPAuthenticatedRole",
							"Arn"
						]
					},
					"unauthenticated": {
						"Fn::GetAtt": [
							"CognitoIDPUnauthenticatedRole",
							"Arn"
						]
					}
				}
			}
		},
		"CognitoIDPAuthenticatedRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "cognito_identitypool_authenticated",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity",
							"Condition": {
								"StringEquals": {
									"cognito-identity.amazonaws.com:aud": {
										"Ref": "CognitoIdentityPool"
									}
								},
								"ForAnyValue:StringLike": {
									"cognito-identity.amazonaws.com:amr": "authenticated"
								}
							}
						}
					]
				}
			}
		},
		"CognitoIDPUnauthenticatedRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "cognito_identitypool_unauthenticated",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity",
							"Condition": {
								"StringEquals": {
									"cognito-identity.amazonaws.com:aud": {
										"Ref": "CognitoIdentityPool"
									}
								},
								"ForAnyValue:StringLike": {
									"cognito-identity.amazonaws.com:amr": "unauthenticated"
								}
							}
						}
					]
				}
			}
		}
	}
}